
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package br.dev.rplus.sintatico;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\014\000\002\023\003\000\002\023\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\024\004\000\002" +
    "\024\002\000\002\026\005\000\002\026\002\000\002\027" +
    "\006\000\002\027\002\000\002\036\003\000\002\036\002" +
    "\000\002\046\003\000\002\046\002\000\002\004\004\000" +
    "\002\004\002\000\002\005\003\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\015\012\000\002\041\003\000\002\041\003" +
    "\000\002\041\002\000\002\037\006\000\002\040\012\000" +
    "\002\034\011\000\002\035\014\000\002\045\006\000\002" +
    "\043\006\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\044\004\000\002\044\002\000\002\020\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\002\000" +
    "\002\016\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\002\000\002\030\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\002\000\002\032\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\002\000\002\022\005\000\002" +
    "\022\004\000\002\022\003\000\002\022\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\006\004\000\002\013\004\000\002\013\002\000" +
    "\002\014\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\uffff\035\006\001\002\000\004\002" +
    "\225\001\002\000\006\002\uffff\035\006\001\002\000\016" +
    "\026\015\027\007\030\011\031\012\032\013\033\010\001" +
    "\002\000\004\007\ufffa\001\002\000\004\007\ufff7\001\002" +
    "\000\004\007\ufff9\001\002\000\004\007\ufff8\001\002\000" +
    "\004\007\ufffc\001\002\000\004\007\017\001\002\000\004" +
    "\007\ufffb\001\002\000\004\007\ufffd\001\002\000\004\005" +
    "\020\001\002\000\016\006\ufff3\026\015\027\007\030\011" +
    "\031\012\033\010\001\002\000\004\006\031\001\002\000" +
    "\004\007\023\001\002\000\006\006\ufff1\036\024\001\002" +
    "\000\014\026\015\027\007\030\011\031\012\033\010\001" +
    "\002\000\004\006\ufff4\001\002\000\004\007\027\001\002" +
    "\000\006\006\ufff1\036\024\001\002\000\004\006\ufff2\001" +
    "\002\000\004\010\032\001\002\000\034\004\040\007\uffed" +
    "\011\uffeb\026\015\027\007\030\011\031\012\033\010\034" +
    "\uffeb\050\035\051\050\055\044\056\033\001\002\000\004" +
    "\005\221\001\002\000\034\004\uffe7\007\uffe7\011\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\050\uffe7" +
    "\051\uffe7\055\uffe7\056\uffe7\001\002\000\004\005\213\001" +
    "\002\000\034\004\uffe5\007\uffe5\011\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\033\uffe5\034\uffe5\050\uffe5\051\uffe5\055" +
    "\uffe5\056\uffe5\001\002\000\006\011\ufff5\034\210\001\002" +
    "\000\004\005\162\001\002\000\034\004\uffe6\007\uffe6\011" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6" +
    "\050\uffe6\051\uffe6\055\uffe6\056\uffe6\001\002\000\034\004" +
    "\040\007\uffed\011\uffeb\026\015\027\007\030\011\031\012" +
    "\033\010\034\uffeb\050\035\051\050\055\044\056\033\001" +
    "\002\000\034\004\uffe8\007\uffe8\011\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\050\uffe8\051\uffe8\055" +
    "\uffe8\056\uffe8\001\002\000\004\005\156\001\002\000\004" +
    "\007\063\001\002\000\004\007\uffee\001\002\000\034\004" +
    "\uffea\007\uffea\011\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\033\uffea\034\uffea\050\uffea\051\uffea\055\uffea\056\uffea\001" +
    "\002\000\004\005\051\001\002\000\006\007\uffef\026\052" +
    "\001\002\000\004\007\ufff0\001\002\000\004\007\054\001" +
    "\002\000\004\052\055\001\002\000\004\007\056\001\002" +
    "\000\004\006\057\001\002\000\004\010\060\001\002\000" +
    "\032\004\040\007\uffed\011\uffeb\026\015\027\007\030\011" +
    "\031\012\033\010\050\035\051\050\055\044\056\033\001" +
    "\002\000\004\011\062\001\002\000\034\004\uffdd\007\uffdd" +
    "\011\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\050\uffdd\051\uffdd\055\uffdd\056\uffdd\001\002\000\036" +
    "\004\uffd6\007\uffd6\011\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\033\uffd6\034\uffd6\042\064\050\uffd6\051\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\032\005\104\007\076\016\101\017" +
    "\074\020\070\021\075\024\071\037\072\040\106\043\100" +
    "\055\044\056\033\001\002\000\034\004\uffe9\007\uffe9\011" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\050\uffe9\051\uffe9\055\uffe9\056\uffe9\001\002\000\060\004" +
    "\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\033\uffc7\034\uffc7\044\152\045\153\050\uffc7" +
    "\051\uffc7\055\uffc7\056\uffc7\001\002\000\064\004\uffc3\006" +
    "\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\022\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\044\uffc3\045\uffc3\046\146\047\144" +
    "\050\uffc3\051\uffc3\055\uffc3\056\uffc3\001\002\000\064\004" +
    "\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\055\uffb4\056\uffb4\001\002\000" +
    "\026\005\104\007\076\016\101\017\074\020\070\021\075" +
    "\024\071\037\072\040\106\043\100\001\002\000\064\004" +
    "\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\022\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\055\uffb2\056\uffb2\001\002\000" +
    "\034\004\uffda\007\uffda\011\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\050\uffda\051\uffda\055\uffda\056" +
    "\uffda\001\002\000\064\004\uffb5\006\uffb5\007\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\022\uffb5\023\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\055" +
    "\uffb5\056\uffb5\001\002\000\064\004\uffb3\006\uffb3\007\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\022\uffb3\023" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\055\uffb3\056\uffb3\001\002\000\064\004\uffc0\006\uffc0" +
    "\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\055\uffc0\056\uffc0\001\002\000\034\004\uffd9" +
    "\007\uffd9\011\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\050\uffd9\051\uffd9\055\uffd9\056\uffd9\001\002" +
    "\000\066\004\uffb8\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\041\137\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\064\004\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\022\uffb6\023\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\055\uffb6\056\uffb6\001\002\000\064\004\uffbd\006\uffbd\007" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\022\uffbd" +
    "\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033" +
    "\uffbd\034\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\055\uffbd\056\uffbd\001\002\000\064\004\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\022\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\055\uffbb\056\uffbb\001\002\000\026\005" +
    "\104\007\076\016\101\017\074\020\070\021\075\024\071" +
    "\037\072\040\106\043\100\001\002\000\064\004\uffbc\006" +
    "\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\033\uffbc\034\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\055\uffbc\056\uffbc\001\002\000\064\004" +
    "\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\033\uffb1\034\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\055\uffb1\056\uffb1\001\002\000" +
    "\042\004\uffd2\006\uffd2\007\uffd2\011\uffd2\013\131\025\132" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\050" +
    "\uffd2\051\uffd2\055\uffd2\056\uffd2\001\002\000\034\004\uffd8" +
    "\007\uffd8\011\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\050\uffd8\051\uffd8\055\uffd8\056\uffd8\001\002" +
    "\000\034\004\uffd7\007\uffd7\011\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\033\uffd7\034\uffd7\050\uffd7\051\uffd7\055\uffd7" +
    "\056\uffd7\001\002\000\064\004\uffbf\006\uffbf\007\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\022\uffbf\023\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\055\uffbf\056\uffbf\001\002\000\054\004\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\012\115\013\uffcb\014\122\015\120\022\116" +
    "\023\117\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\050\uffcb\051\uffcb\055\uffcb\056\uffcb\001\002" +
    "\000\064\004\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe\056\uffbe" +
    "\001\002\000\026\005\104\007\076\016\101\017\074\020" +
    "\070\021\075\024\071\037\072\040\106\043\100\001\002" +
    "\000\026\005\104\007\076\016\101\017\074\020\070\021" +
    "\075\024\071\037\072\040\106\043\100\001\002\000\026" +
    "\005\104\007\076\016\101\017\074\020\070\021\075\024" +
    "\071\037\072\040\106\043\100\001\002\000\026\005\104" +
    "\007\076\016\101\017\074\020\070\021\075\024\071\037" +
    "\072\040\106\043\100\001\002\000\042\004\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\013\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\033\uffd1\034\uffd1\050\uffd1\051\uffd1\055\uffd1" +
    "\056\uffd1\001\002\000\026\005\104\007\076\016\101\017" +
    "\074\020\070\021\075\024\071\037\072\040\106\043\100" +
    "\001\002\000\042\004\uffcf\006\uffcf\007\uffcf\011\uffcf\013" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\050\uffcf\051\uffcf\055\uffcf\056\uffcf\001\002\000" +
    "\042\004\uffce\006\uffce\007\uffce\011\uffce\013\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce\050" +
    "\uffce\051\uffce\055\uffce\056\uffce\001\002\000\042\004\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\013\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\050\uffcc\051\uffcc" +
    "\055\uffcc\056\uffcc\001\002\000\042\004\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\013\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\033\uffcd\034\uffcd\050\uffcd\051\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\042\004\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\013\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033" +
    "\uffd0\034\uffd0\050\uffd0\051\uffd0\055\uffd0\056\uffd0\001\002" +
    "\000\036\004\uffd5\006\uffd5\007\uffd5\011\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\050\uffd5\051\uffd5" +
    "\055\uffd5\056\uffd5\001\002\000\026\005\104\007\076\016" +
    "\101\017\074\020\070\021\075\024\071\037\072\040\106" +
    "\043\100\001\002\000\026\005\104\007\076\016\101\017" +
    "\074\020\070\021\075\024\071\037\072\040\106\043\100" +
    "\001\002\000\036\004\uffd3\006\uffd3\007\uffd3\011\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\050\uffd3" +
    "\051\uffd3\055\uffd3\056\uffd3\001\002\000\036\004\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\033\uffd4\034\uffd4\050\uffd4\051\uffd4\055\uffd4\056\uffd4\001" +
    "\002\000\004\006\136\001\002\000\064\004\uffc2\006\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\022" +
    "\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\033\uffc2\034\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\055\uffc2\056\uffc2\001\002\000\004\043\141" +
    "\001\002\000\064\004\uffba\006\uffba\007\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\022\uffba\023\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\055\uffba" +
    "\056\uffba\001\002\000\064\004\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\055\uffb7\056\uffb7\001\002\000\064\004\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\022\uffb9" +
    "\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\055\uffb9\056\uffb9\001\002\000\064\004\uffc1\006" +
    "\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\055\uffc1\056\uffc1\001\002\000\026\005" +
    "\104\007\076\016\101\017\074\020\070\021\075\024\071" +
    "\037\072\040\106\043\100\001\002\000\060\004\uffc6\006" +
    "\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\044\uffc6\045\uffc6\050\uffc6\051\uffc6" +
    "\055\uffc6\056\uffc6\001\002\000\026\005\104\007\076\016" +
    "\101\017\074\020\070\021\075\024\071\037\072\040\106" +
    "\043\100\001\002\000\060\004\uffc4\006\uffc4\007\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\022\uffc4\023\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\044\uffc4\045\uffc4\050\uffc4\051\uffc4\055\uffc4\056\uffc4" +
    "\001\002\000\060\004\uffc5\006\uffc5\007\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\044" +
    "\uffc5\045\uffc5\050\uffc5\051\uffc5\055\uffc5\056\uffc5\001\002" +
    "\000\054\004\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\022\uffca\023\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca\050\uffca\051" +
    "\uffca\055\uffca\056\uffca\001\002\000\026\005\104\007\076" +
    "\016\101\017\074\020\070\021\075\024\071\037\072\040" +
    "\106\043\100\001\002\000\026\005\104\007\076\016\101" +
    "\017\074\020\070\021\075\024\071\037\072\040\106\043" +
    "\100\001\002\000\054\004\uffc8\006\uffc8\007\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\022\uffc8\023\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8" +
    "\050\uffc8\051\uffc8\055\uffc8\056\uffc8\001\002\000\054\004" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\050\uffc9\051\uffc9\055\uffc9" +
    "\056\uffc9\001\002\000\026\005\104\007\076\016\101\017" +
    "\074\020\070\021\075\024\071\037\072\040\106\043\100" +
    "\001\002\000\004\006\160\001\002\000\034\004\uffdc\007" +
    "\uffdc\011\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc" +
    "\034\uffdc\050\uffdc\051\uffdc\055\uffdc\056\uffdc\001\002\000" +
    "\006\011\uffec\034\uffec\001\002\000\026\005\104\007\076" +
    "\016\101\017\074\020\070\021\075\024\071\037\072\040" +
    "\106\043\100\001\002\000\004\006\164\001\002\000\004" +
    "\010\165\001\002\000\032\004\040\007\uffed\011\uffeb\026" +
    "\015\027\007\030\011\031\012\033\010\050\035\051\050" +
    "\055\044\056\033\001\002\000\004\011\167\001\002\000" +
    "\040\004\uffe1\007\uffe1\011\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\033\uffe1\034\uffe1\050\uffe1\051\uffe1\053\171\054" +
    "\173\055\uffe1\056\uffe1\001\002\000\034\004\uffe2\007\uffe2" +
    "\011\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034" +
    "\uffe2\050\uffe2\051\uffe2\055\uffe2\056\uffe2\001\002\000\004" +
    "\010\204\001\002\000\034\004\uffe4\007\uffe4\011\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\050\uffe4" +
    "\051\uffe4\055\uffe4\056\uffe4\001\002\000\004\005\175\001" +
    "\002\000\034\004\uffe3\007\uffe3\011\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\033\uffe3\034\uffe3\050\uffe3\051\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\026\005\104\007\076\016\101" +
    "\017\074\020\070\021\075\024\071\037\072\040\106\043" +
    "\100\001\002\000\004\006\177\001\002\000\004\010\200" +
    "\001\002\000\032\004\040\007\uffed\011\uffeb\026\015\027" +
    "\007\030\011\031\012\033\010\050\035\051\050\055\044" +
    "\056\033\001\002\000\004\011\202\001\002\000\040\004" +
    "\uffe1\007\uffe1\011\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\050\uffe1\051\uffe1\053\171\054\173\055" +
    "\uffe1\056\uffe1\001\002\000\034\004\uffdf\007\uffdf\011\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\050" +
    "\uffdf\051\uffdf\055\uffdf\056\uffdf\001\002\000\032\004\040" +
    "\007\uffed\011\uffeb\026\015\027\007\030\011\031\012\033" +
    "\010\050\035\051\050\055\044\056\033\001\002\000\004" +
    "\011\206\001\002\000\034\004\uffe0\007\uffe0\011\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\050\uffe0" +
    "\051\uffe0\055\uffe0\056\uffe0\001\002\000\004\011\212\001" +
    "\002\000\026\005\104\007\076\016\101\017\074\020\070" +
    "\021\075\024\071\037\072\040\106\043\100\001\002\000" +
    "\004\011\ufff6\001\002\000\006\002\ufffe\035\ufffe\001\002" +
    "\000\026\005\104\007\076\016\101\017\074\020\070\021" +
    "\075\024\071\037\072\040\106\043\100\001\002\000\004" +
    "\006\215\001\002\000\004\010\216\001\002\000\032\004" +
    "\040\007\uffed\011\uffeb\026\015\027\007\030\011\031\012" +
    "\033\010\050\035\051\050\055\044\056\033\001\002\000" +
    "\004\011\220\001\002\000\034\004\uffde\007\uffde\011\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\050" +
    "\uffde\051\uffde\055\uffde\056\uffde\001\002\000\016\006\ufff3" +
    "\026\015\027\007\030\011\031\012\033\010\001\002\000" +
    "\004\006\223\001\002\000\034\004\uffdb\007\uffdb\011\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\050" +
    "\uffdb\051\uffdb\055\uffdb\056\uffdb\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\002\223\003\004\001\001\000\006\023\013" +
    "\025\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\021\026\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\024\001\001\000\004\025" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\036\005\041\015\046\025\045\034\042\035\033" +
    "\043\040\045\035\046\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\160\005\041\015\046\025\045\034\042\035\033" +
    "\043\040\045\035\046\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\060\005\041\015\046\025\045\034\042\035\033\043\040" +
    "\045\035\046\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\064\001\001\000\034\006\113\007\101" +
    "\010\102\011\104\012\111\016\106\020\107\022\066\030" +
    "\112\032\065\042\110\043\076\045\072\001\001\000\002" +
    "\001\001\000\004\031\150\001\001\000\004\033\144\001" +
    "\001\000\002\001\001\000\016\006\113\007\101\010\102" +
    "\011\104\012\111\022\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\113\007\101\010\102\011\104\012\111\016\106\020" +
    "\134\022\066\030\112\032\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\120" +
    "\001\001\000\002\001\001\000\024\006\113\007\101\010" +
    "\102\011\104\012\111\016\126\022\066\030\112\032\065" +
    "\001\001\000\024\006\113\007\101\010\102\011\104\012" +
    "\111\016\125\022\066\030\112\032\065\001\001\000\024" +
    "\006\113\007\101\010\102\011\104\012\111\016\124\022" +
    "\066\030\112\032\065\001\001\000\024\006\113\007\101" +
    "\010\102\011\104\012\111\016\123\022\066\030\112\032" +
    "\065\001\001\000\002\001\001\000\024\006\113\007\101" +
    "\010\102\011\104\012\111\016\122\022\066\030\112\032" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\113\007\101\010\102\011\104\012\111" +
    "\016\106\020\133\022\066\030\112\032\065\001\001\000" +
    "\026\006\113\007\101\010\102\011\104\012\111\016\106" +
    "\020\132\022\066\030\112\032\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\113" +
    "\007\101\010\102\011\104\012\111\022\066\032\147\001" +
    "\001\000\002\001\001\000\020\006\113\007\101\010\102" +
    "\011\104\012\111\022\066\032\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\113" +
    "\007\101\010\102\011\104\012\111\022\066\030\154\032" +
    "\065\001\001\000\022\006\113\007\101\010\102\011\104" +
    "\012\111\022\066\030\153\032\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\113\007\101\010\102" +
    "\011\104\012\111\016\106\020\156\022\066\030\112\032" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\113\007\101\010\102\011\104\012" +
    "\111\016\106\020\162\022\066\030\112\032\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\165\005" +
    "\041\015\046\025\045\034\042\035\033\043\040\045\035" +
    "\046\044\001\001\000\002\001\001\000\010\037\173\040" +
    "\167\041\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\113\007\101\010\102\011\104\012\111\016\106" +
    "\020\175\022\066\030\112\032\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\200\005\041\015\046" +
    "\025\045\034\042\035\033\043\040\045\035\046\044\001" +
    "\001\000\002\001\001\000\010\037\173\040\167\041\202" +
    "\001\001\000\002\001\001\000\024\004\204\005\041\015" +
    "\046\025\045\034\042\035\033\043\040\045\035\046\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\113\007\101\010\102\011\104\012\111" +
    "\016\106\020\210\022\066\030\112\032\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\113\007\101" +
    "\010\102\011\104\012\111\016\106\020\213\022\066\030" +
    "\112\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\216\005\041\015\046\025\045\034\042\035" +
    "\033\043\040\045\035\046\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\021\026\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        System.err.println("Erro sintático: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= FuncDeclaration Start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncDeclaration ::= FUNCTION FuncTypes ID ABRIR_PAR Parameters FECHAR_PAR ABRIR_BLOCO Blocks ReturnBlock FECHAR_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FuncTypes ::= Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncTypes",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FuncTypes ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncTypes",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Types ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Types ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Types ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Types ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Types ::= STR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ReturnBlock ::= RETURN ExpLogical 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnBlock",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ReturnBlock ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnBlock",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parameters ::= Types ID Parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameter ::= VIRGULA Types ID Parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameter",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameter",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ForTypes ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForTypes",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ForTypes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForTypes",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EmptyTypes ::= Types 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmptyTypes",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EmptyTypes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmptyTypes",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Blocks ::= Block Blocks 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Blocks",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Blocks ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Blocks",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= EmptyTypes ID InitializeVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Block ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Block ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Block ::= InputStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Block ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IfStmt ::= IF ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO AfterIfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AfterIfStmt ::= ElseStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AfterIfStmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AfterIfStmt ::= ElifStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AfterIfStmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AfterIfStmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AfterIfStmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ElseStmt ::= ELSE ABRIR_BLOCO Blocks FECHAR_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseStmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ElifStmt ::= ELIF ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO AfterIfStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElifStmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WhileStmt ::= WHILE ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ForStmt ::= FOR ABRIR_PAR ForTypes ID IN ID FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrintStmt ::= PRINT ABRIR_PAR ExpLogical FECHAR_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintStmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InputStmt ::= INPUT ABRIR_PAR Parameters FECHAR_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InputStmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AtrFactor ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtrFactor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AtrFactor ::= InputStmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtrFactor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AtrFactor ::= ExpLogical 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtrFactor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InitializeVariable ::= OP_ATRIBUICAO AtrFactor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitializeVariable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InitializeVariable ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InitializeVariable",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpLogical ::= ExpRelational ExpLogicalOperators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogical",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpLogicalOperators ::= OP_E ExpLogical 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogicalOperators",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpLogicalOperators ::= OP_OU ExpLogical 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogicalOperators",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpLogicalOperators ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogicalOperators",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpRelational ::= ExpAddSub ExpRelationalOperators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelational",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpRelationalOperators ::= OP_MENOR ExpRelational 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelationalOperators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpRelationalOperators ::= OP_MAIOR ExpRelational 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelationalOperators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpRelationalOperators ::= OP_MAIORIGUAL ExpRelational 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelationalOperators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpRelationalOperators ::= OP_MENORIGUAL ExpRelational 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelationalOperators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpRelationalOperators ::= OP_COMPARACAO ExpRelational 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelationalOperators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpRelationalOperators ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelationalOperators",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpAddSub ::= ExpMultDiv ExpAddSubOperators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAddSub",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpAddSubOperators ::= OP_ADICAO ExpAddSub 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAddSubOperators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpAddSubOperators ::= OP_SUBTRACAO ExpAddSub 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAddSubOperators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpAddSubOperators ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAddSubOperators",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpMultDiv ::= HigherExp ExpMultDivOperators 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultDiv",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpMultDivOperators ::= OP_MULT ExpMultDiv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultDivOperators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpMultDivOperators ::= OP_DIV ExpMultDiv 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultDivOperators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpMultDivOperators ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultDivOperators",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // HigherExp ::= ABRIR_PAR ExpLogical FECHAR_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HigherExp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // HigherExp ::= OP_NOT HigherExp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HigherExp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // HigherExp ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HigherExp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // HigherExp ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HigherExp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Literal ::= IntegerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Literal ::= StrLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Literal ::= BoolLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Literal ::= CharacLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IntegerLiteral ::= CONSTANTE FactorIntegerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerLiteral",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FactorIntegerLiteral ::= PONTO RealLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorIntegerLiteral",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FactorIntegerLiteral ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FactorIntegerLiteral",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RealLiteral ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RealLiteral",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StrLiteral ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StrLiteral",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StrLiteral ::= STRING_VAZIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StrLiteral",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CharacLiteral ::= STRING_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CharacLiteral",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CharacLiteral ::= STRING_CHARAC_VAZIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CharacLiteral",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BoolLiteral ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BoolLiteral ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolLiteral",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
