package br.dev.rplus.sintatico;

parser code {:

    public void report_error(String message, Object info) {
        System.err.println("Erro sintático: " + message);
    }
:};

/* Terminais */
terminal IF, ABRIR_PAR, FECHAR_PAR, ID, ABRIR_BLOCO, FECHAR_BLOCO, OP_MENOR, OP_E, OP_MAIOR, OP_MAIORIGUAL, STRING, STRING_VAZIA, STRING_CHAR, STRING_CHARAC_VAZIA,
         OP_MENORIGUAL, OP_COMPARACAO, OP_NOT, OP_OU, INT, REAL, BOOL, CHAR, VOID, STR, RETURN, FUNCTION, VIRGULA, TRUE, FALSE, PONTO, OP_ATRIBUICAO, CONSTANTE,
         OP_ADICAO, OP_SUBTRACAO, OP_DIV, OP_MULT, WHILE, FOR, IN, ELSE, ELIF, PRINT, INPUT ;

/* Não Terminais */
non terminal Start, FuncDeclaration, Blocks, Block, IntegerLiteral, StrLiteral, CharacLiteral, BoolLiteral, Literal, FactorIntegerLiteral, RealLiteral ,
              IfStmt, ExpRelational, ExpRelationalOperators, ExpLogical, ExpLogicalOperators, HigherExp, FuncTypes, ReturnBlock, Types, Parameters, Parameter,
              ExpAddSub, ExpAddSubOperators, ExpMultDiv, ExpMultDivOperators, WhileStmt, ForStmt, ForTypes, ElseStmt, ElifStmt, AfterIfStmt, AtrFactor, InputStmt,
              InitializeVariable, PrintStmt, EmptyTypes ;

/* Declaracoes */
Start ::= FuncDeclaration Start | /* empty */ ;
FuncDeclaration ::= FUNCTION FuncTypes ID ABRIR_PAR Parameters FECHAR_PAR ABRIR_BLOCO Blocks ReturnBlock FECHAR_BLOCO ;
FuncTypes ::= Types | VOID ;
Types ::= INT | REAL | BOOL | CHAR | STR ;
ReturnBlock ::= RETURN ExpLogical | /* empty */ ;
Parameters ::= Types ID Parameter | /* empty */;
Parameter ::= VIRGULA Types ID Parameter | /* empty */ ;
ForTypes ::= INT | /* empty */ ;
EmptyTypes ::= Types | /* empty */ ;

/* Blocos */
Blocks ::= Block Blocks | /* empty */ ;
Block ::= IfStmt | EmptyTypes ID InitializeVariable | WhileStmt | ForStmt | InputStmt | PrintStmt;

/* Statements */
IfStmt ::= IF ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO AfterIfStmt ;
AfterIfStmt ::= ElseStmt | ElifStmt | /* empty */ ;
ElseStmt ::= ELSE ABRIR_BLOCO Blocks FECHAR_BLOCO ;
ElifStmt ::= ELIF ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO AfterIfStmt ;
WhileStmt ::= WHILE ABRIR_PAR ExpLogical FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO;
ForStmt ::= FOR ABRIR_PAR ForTypes ID IN ID FECHAR_PAR ABRIR_BLOCO Blocks FECHAR_BLOCO ;
PrintStmt ::= PRINT ABRIR_PAR ExpLogical FECHAR_PAR ;
InputStmt ::= INPUT ABRIR_PAR Parameters FECHAR_PAR ;
AtrFactor ::= PrintStmt | InputStmt | ExpLogical;
InitializeVariable ::= OP_ATRIBUICAO AtrFactor | /* empty */ ;

/* Expressions */
ExpLogical ::= ExpRelational ExpLogicalOperators ;
ExpLogicalOperators ::= OP_E ExpLogical |
                        OP_OU ExpLogical | /* empty */ ;

ExpRelational ::= ExpAddSub ExpRelationalOperators ;
ExpRelationalOperators ::= OP_MENOR ExpRelational |
                            OP_MAIOR ExpRelational |
                            OP_MAIORIGUAL ExpRelational |
                            OP_MENORIGUAL ExpRelational |
                            OP_COMPARACAO ExpRelational | /* empty */ ;

ExpAddSub ::= ExpMultDiv ExpAddSubOperators ;
ExpAddSubOperators ::= OP_ADICAO ExpAddSub
                      | OP_SUBTRACAO ExpAddSub
                      | /* empty */;

ExpMultDiv ::= HigherExp ExpMultDivOperators;
ExpMultDivOperators ::= OP_MULT ExpMultDiv
                       | OP_DIV ExpMultDiv
                       | /* empty */;

HigherExp ::= ABRIR_PAR ExpLogical FECHAR_PAR
              | OP_NOT HigherExp
              | ID
              | Literal;

Literal ::= IntegerLiteral
            | StrLiteral
            | BoolLiteral
            | CharacLiteral ;
IntegerLiteral ::= CONSTANTE FactorIntegerLiteral ;
FactorIntegerLiteral ::= PONTO RealLiteral | /* empty */ ;
RealLiteral ::= CONSTANTE;
StrLiteral ::= STRING | STRING_VAZIA ;
CharacLiteral ::= STRING_CHAR | STRING_CHARAC_VAZIA ;
BoolLiteral ::= TRUE | FALSE ;
